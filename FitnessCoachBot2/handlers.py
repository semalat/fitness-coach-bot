from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters, Application
)
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, Message
from telegram.ext import (
    ContextTypes, CommandHandler, CallbackQueryHandler, ConversationHandler,
    MessageHandler, filters
)
import logging
import messages
from datetime import datetime, timedelta
from config import AGE, HEIGHT, WEIGHT, SEX, GOALS, FITNESS_LEVEL, EQUIPMENT
from keyboards import (
    get_sex_keyboard, get_goals_keyboard, get_fitness_level_keyboard,
    get_equipment_keyboard, get_calendar_keyboard, get_reminder_keyboard
)

logger = logging.getLogger(__name__)

class BotHandlers:
    def __init__(self, database, workout_manager, reminder_manager):
        self.db = database
        self.workout_manager = workout_manager
        self.reminder_manager = reminder_manager

    async def show_progress(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /progress command - show fitness dashboard"""
        try:
            # Initialize message_obj early
            message_obj = None
            user_id = None

            if update.callback_query:
                user_id = update.callback_query.from_user.id
                message_obj = update.callback_query.message
            elif update.message:
                user_id = update.effective_user.id
                message_obj = update.message
            else:
                logger.error("Invalid update object: neither callback_query nor message found")
                return

            # Get detailed statistics
            stats = self.db.get_detailed_progress_stats(user_id)
            logger.info(f"Retrieved initial stats for dashboard: {stats}")

            streaks = stats.get('streaks', {})
            current_streak = streaks.get('current_streak', 0)
            longest_streak = streaks.get('longest_streak', 0)

            # Format main dashboard message
            message = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–§–∏—Ç–Ω–µ—Å –î–∞—à–±–æ—Ä–¥*\n\n"

            # Overall Statistics
            message += "*üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n"
            message += f"‚Ä¢ –í—Å–µ–≥–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {stats.get('total_workouts', 0)}\n"
            message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é: {stats.get('completed_workouts', 0)}\n"
            message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {stats.get('completion_rate', 0)}%\n\n"

            # Streaks
            message += "*üî• –°–µ—Ä–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n"
            message += f"‚Ä¢ –¢–µ–∫—É—â–∞—è —Å–µ—Ä–∏—è: {current_streak} –¥–Ω–µ–π\n"
            message += f"‚Ä¢ –õ—É—á—à–∞—è —Å–µ—Ä–∏—è: {longest_streak} –¥–Ω–µ–π\n\n"

            # Navigation buttons
            keyboard = [
                [
                    InlineKeyboardButton("üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º", callback_data="progress_weekly"),
                    InlineKeyboardButton("üìÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç", callback_data="progress_monthly")
                ],
                [
                    InlineKeyboardButton("üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è", callback_data="achievements"),
                    InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="workout_history")
                ],
                [
                    InlineKeyboardButton("üí™ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏", callback_data="intensity_analysis")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            logger.info("Sending main dashboard view")
            try:
                if isinstance(message_obj, Message):
                    await message_obj.reply_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
                else:
                    await message_obj.edit_text(
                        message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )
            except Exception as e:
                logger.error(f"Error sending message: {str(e)}", exc_info=True)
                # Try to send as a new message if edit fails
                await update.effective_chat.send_message(
                    message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

        except Exception as e:
            logger.error(f"Error showing progress dashboard: {str(e)}", exc_info=True)
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            if message_obj:
                await message_obj.reply_text(error_message)
            elif update.effective_chat:
                await update.effective_chat.send_message(error_message)
            else:
                logger.error("Could not send error message: no valid message object or chat")

    async def start_gym_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start a gym-specific workout session"""
        user_id = update.effective_user.id
        profile = self.db.get_user_profile(user_id)

        if not profile:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return

        equipment = profile.get('equipment', '').lower()
        if '–∑–∞–ª' not in equipment:
            await update.message.reply_text(
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –±–µ–∑ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_workout –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –≤–µ—Å–æ–º."
            )
            return

        # Get the previewed workout or generate new if none exists
        workout = self.db.get_preview_workout(user_id)
        if not workout:
            logger.info(f"No preview workout found for user {user_id}, generating new workout")
            workout = self.workout_manager.generate_gym_workout(profile)
        else:
            logger.info(f"Using previewed workout for user {user_id}")

        self.db.start_active_workout(user_id, workout)
        self.db.clear_preview_workout(user_id)  # Clear the preview after starting
        await self._show_gym_exercise(update, context)

    async def _show_gym_exercise(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Display current exercise with controls"""
        user_id = update.effective_user.id if update.callback_query else update.effective_user.id
        workout = self.db.get_active_workout(user_id)

        if not workout:
            message = "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /workout –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."
            if update.callback_query:
                await update.callback_query.message.reply_text(message)
            else:
                await update.message.reply_text(message)
            return

        exercise = workout['exercises'][workout['current_exercise']]
        current = workout['current_exercise'] + 1
        total = workout['total_exercises']

        # Build the message based on workout type
        if workout['workout_type'] == 'bodyweight':
            current_circuit = workout.get('current_circuit', 1)  # Track circuit globally
            total_circuits = exercise.get('circuits', 3)

            message = f"üí™ –ö—Ä—É–≥ {current_circuit}/{total_circuits}\n"
            message += f"–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current}/{total}\n\n"
            message += f"üìç {exercise['name']}\n"
            message += f"üéØ –¶–µ–ª–µ–≤—ã–µ –º—ã—à—Ü—ã: {exercise['target_muscle']}\n"
            message += f"‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å: {exercise.get('difficulty', '—Å—Ä–µ–¥–Ω–∏–π')}\n\n"

            if exercise.get('time', 0) > 0:
                message += f"‚è± –í—Ä–µ–º—è: {exercise['time']} —Å–µ–∫\n"
            else:
                message += f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {exercise['reps']}\n"

            # Format rest times using workout-level circuits rest
            circuits_rest = workout['circuits_rest']  # Use workout-level circuits rest
            if circuits_rest >= 60:
                circuits_rest_str = f"{circuits_rest // 60} –º–∏–Ω {circuits_rest % 60} —Å–µ–∫"
            else:
                circuits_rest_str = f"{circuits_rest} —Å–µ–∫"

            exercises_rest = exercise['exercises_rest']
            exercises_rest_str = f"{exercises_rest} —Å–µ–∫"

            message += f"\n‚è∞ –û—Ç–¥—ã—Ö –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏: {circuits_rest_str}"
            message += f"\n‚è∞ –û—Ç–¥—ã—Ö –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏: {exercises_rest_str}"

            # Add instructions
            message += "\n\nüìã –ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:"
            if exercise.get('time', 0) > 0:
                message += "\n1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '‚è± –°—Ç–∞—Ä—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è' —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ç–∞–π–º–µ—Ä"
                message += "\n2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω—è–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –ø–æ–∫–∞ –∏–¥–µ—Ç —Ç–∞–π–º–µ—Ä"
                message += "\n3Ô∏è‚É£ –ü–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'"
            else:
                message += "\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑"
                message += "\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'"
            message += "\n3Ô∏è‚É£ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Ç–∞–π–º–µ—Ä–∞"
            message += "\n4Ô∏è‚É£ –ü–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è - –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∫—Ä—É–≥–æ–º"

            # Create keyboard
            keyboard = []

            # Add exercise timer button if it's a timed exercise
            if exercise.get('time', 0) > 0:
                keyboard.append([
                    InlineKeyboardButton(
                        "‚è± –°—Ç–∞—Ä—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                        callback_data=f"exercise_timer_{exercise['time']}"
                    )
                ])

            # Add completion button
            keyboard.append([InlineKeyboardButton("‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data="exercise_done")])

            # Add appropriate rest timer
            if workout['current_exercise'] == workout['total_exercises'] - 1:
                # Show circuit rest only after last exercise
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚è∞ –û—Ç–¥—ã—Ö –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏ {circuits_rest_str}",
                        callback_data=f"circuit_rest_{circuits_rest}"
                    )
                ])
            else:
                # Show exercise rest between exercises
                keyboard.append([
                    InlineKeyboardButton(
                        f"‚è∞ –û—Ç–¥—ã—Ö –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ {exercises_rest_str}",
                        callback_data=f"exercise_rest_{exercises_rest}"
                    )
                ])

        else:
            current_set = exercise.get('current_set', 1)
            total_sets = int(exercise.get('sets', 3))

            message = f"üí™ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ {current}/{total}\n\n"
            message += f"üìç {exercise['name']}\n"
            message += f"üéØ –¶–µ–ª–µ–≤—ã–µ –º—ã—à—Ü—ã: {exercise['target_muscle']}\n"
            message += f"‚≠ê –°–ª–æ–∂–Ω–æ—Å—Ç—å: {exercise.get('difficulty', '—Å—Ä–µ–¥–Ω–∏–π')}\n\n"
            message += f"–°–µ—Ç {current_set}/{total_sets}\n"
            message += f"üîÑ –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è: {exercise['reps']}\n"

            if exercise.get('weight', 0) > 0:
                message += f"üèãÔ∏è –í–µ—Å: {exercise['weight']} –∫–≥\n"

            message += f"\n‚è∞ –û—Ç–¥—ã—Ö –º–µ–∂–¥—É —Å–µ—Ç–∞–º–∏: {exercise['sets_rest']} —Å–µ–∫"

            # Add instructions
            message += "\n\nüìã –ö–∞–∫ –≤—ã–ø–æ–ª–Ω—è—Ç—å:"
            message += "\n1Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≤–µ—Å–æ–º"
            message += "\n2Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ '‚úÖ –°–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω'"
            message += "\n3Ô∏è‚É£ –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É —Ç–∞–π–º–µ—Ä–∞"

            # Create keyboard
            keyboard = []

            # Add completion button
            keyboard.append([InlineKeyboardButton("‚úÖ –°–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω", callback_data="set_done")])
            keyboard.append([
                InlineKeyboardButton(
                    f"‚è∞ –û—Ç–¥—ã—Ö {exercise['sets_rest']} —Å–µ–∫",
                    callback_data=f"rest_{exercise['sets_rest']}"
                )
            ])


        # Add navigation buttons
        nav_buttons = []
        if workout['current_exercise'] > 0:
            nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–µ–µ", callback_data="prev_exercise"))
        if workout['current_exercise'] < workout['total_exercises'] - 1:
            nav_buttons.append(InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–µ–µ", callback_data="next_exercise"))
        if nav_buttons:
            keyboard.append(nav_buttons)

        # Add finish workout button
        keyboard.append([InlineKeyboardButton("üèÅ –ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="finish_workout")])

        reply_markup = InlineKeyboardMarkup(keyboard)

        try:
            if 'gif_url' in exercise:
                try:
                    if update.callback_query:
                        await update.callback_query.message.reply_animation(
                            animation=exercise['gif_url'],
                            caption=message,
                            reply_markup=reply_markup
                        )
                        try:
                            await update.callback_query.message.delete()
                        except Exception:
                            pass
                    else:
                        await update.message.reply_animation(
                            animation=exercise['gif_url'],
                            caption=message,
                            reply_markup=reply_markup
                        )
                except Exception as e:
                    logger.error(f"Failed to send GIF: {str(e)}")
                    if update.callback_query:
                        await update.callback_query.message.reply_text(
                            text=message,
                            reply_markup=reply_markup
                        )
                    else:
                        await update.message.reply_text(
                            text=message,
                            reply_markup=reply_markup
                        )
            else:
                if update.callback_query:
                    await update.callback_query.message.reply_text(
                        text=message,
                        reply_markup=reply_markup
                    )
                else:
                    await update.message.reply_text(
                        text=message,
                        reply_markup=reply_markup
                    )

        except Exception as e:
            logger.error(f"Error in _show_gym_exercise: {str(e)}")
            error_message = "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∑–∞–Ω–æ–≤–æ."
            if update.callback_query:
                await update.callback_query.message.reply_text(error_message)
            else:
                await update.message.reply_text(error_message)

    async def _finish_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Complete the workout and save progress"""
        user_id = update.effective_user.id
        workout = self.db.get_active_workout(user_id)

        if workout:
            # Save workout completion in database
            completion_data = {
                'date': datetime.now().strftime('%Y-%m-%d'),
                'exercises_completed': workout['current_exercise'] + 1,
                'total_exercises': workout['total_exercises'],
                'workout_completed': True,
                'workout_id': f"workout_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            }

            self.db.save_workout_progress(user_id, completion_data)
            self.db.finish_active_workout(user_id)

            # Ask for feedback about the workout
            keyboard = [
                [
                    InlineKeyboardButton("üòä –ë—ã–ª–æ –≤–µ—Å–µ–ª–æ!", callback_data="feedback_fun"),
                    InlineKeyboardButton("üòê –ù–µ –æ—á–µ–Ω—å", callback_data="feedback_not_fun")
                ],
                [
                    InlineKeyboardButton("üí™ –°–ª–∏—à–∫–æ–º –ª–µ–≥–∫–æ", callback_data="feedback_too_easy"),
                    InlineKeyboardButton("üëç –í —Å–∞–º—ã–π —Ä–∞–∑", callback_data="feedback_ok"),
                    InlineKeyboardButton("üòì –£—Å—Ç–∞–ª(–∞)", callback_data="feedback_tired")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            # Delete the last exercise message
            if update.callback_query:
                try:
                    await update.callback_query.message.delete()
                except Exception:
                    pass

            message = (
                "üéâ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                f"‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {completion_data['exercises_completed']}/{completion_data['total_exercises']}\n\n"
                "–ö–∞–∫ –≤–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞? –í–∞—à –æ—Ç–∑—ã–≤ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑!"
            )

            # Store workout_id in context for feedback handling
            context.user_data['last_workout_id'] = completion_data['workout_id']

            if update.callback_query:
                await update.callback_query.message.reply_text(message, reply_markup=reply_markup)
            else:
                await update.message.reply_text(message, reply_markup=reply_markup)

    async def handle_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, timer_type: str, rest_time: int):
        """Handle rest timer between sets/circuits"""
        query = update.callback_query
        # Delete only the timer message when done

        timer_message = await query.message.reply_text(f"‚è± {timer_type}: {rest_time} —Å–µ–∫")

        for remaining in range(rest_time - 1, -1, -1):
            await asyncio.sleep(1)
            try:
                await timer_message.edit_text(f"‚è± {timer_type}: {remaining} —Å–µ–∫")
            except Exception as e:
                logger.error(f"Error updating timer: {str(e)}")
                break

        # Delete only the timer message when done
        try:
            await timer_message.delete()
        except Exception:
            pass

        await query.message.reply_text(
            "‚úÖ –û—Ç–¥—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!\n"
            "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è."
        )

    async def handle_gym_workout_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle workout callbacks"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        workout = self.db.get_active_workout(user_id)

        if not workout:
            await query.message.reply_text(
                "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /workout –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."
            )
            return

        # Handle exercise timer
        if query.data.startswith("exercise_timer_"):
            time = int(query.data.split('_')[2])
            await self.handle_exercise_timer(update, context, time)
            return

        if workout['workout_type'] == 'bodyweight':
            current_circuit = workout.get('current_circuit', 1)
            exercise = workout['exercises'][workout['current_exercise']]
            total_circuits = exercise.get('circuits', 3)

            if query.data == "exercise_done":
                if workout['current_exercise'] < workout['total_exercises'] - 1:
                    # Move to next exercise in current circuit
                    workout['current_exercise'] += 1
                    self.db.save_active_workout(user_id, workout)
                    # Delete previous exercise message
                    try:
                        await query.message.delete()
                    except Exception:
                        pass
                    await self._show_gym_exercise(update, context)
                else:
                    # Last exercise in circuit completed
                    if current_circuit < total_circuits:
                        # Start next circuit from first exercise
                        workout['current_exercise'] = 0
                        workout['current_circuit'] = current_circuit + 1
                        self.db.save_active_workout(user_id, workout)
                        # Delete previous exercise message
                        try:
                            await query.message.delete()
                        except Exception:
                            pass
                        await self._show_gym_exercise(update, context)
                    else:
                        # All circuits completed
                        await self._finish_workout(update, context)

            elif query.data.startswith("circuit_rest_"):
                rest_time = int(query.data.split('_')[2])
                await self.handle_timer(update, context, "–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –∫—Ä—É–≥–∞–º–∏", rest_time)

            elif query.data.startswith("exercise_rest_"):
                rest_time = int(query.data.split('_')[2])
                await self.handle_timer(update, context, "–û—Ç–¥—ã—Ö –º–µ–∂–¥—É —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏", rest_time)

        else:
            # Gym workout callback handling
            if query.data == "set_done":
                current_exercise = workout['exercises'][workout['current_exercise']]
                current_set = current_exercise.get('current_set', 1)
                total_sets = int(current_exercise.get('sets', 3))

                if current_set < total_sets:
                    current_exercise['current_set'] = current_set + 1
                    self.db.save_active_workout(user_id, workout)
                    # Delete previous exercise message
                    try:
                        await query.message.delete()
                    except Exception:
                        pass
                    await self._show_gym_exercise(update, context)
                else:
                    if workout['current_exercise'] < workout['total_exercises'] - 1:
                        workout['current_exercise'] += 1
                        workout['exercises'][workout['current_exercise']]['current_set'] = 1
                        self.db.save_active_workout(user_id, workout)
                        # Delete previous exercise message
                        try:
                            await query.message.delete()
                        except Exception:
                            pass
                        await self._show_gym_exercise(update, context)
                    else:
                        await self._finish_workout(update, context)

            elif query.data.startswith("rest_"):
                rest_time = int(query.data.split('_')[1])
                await self.handle_timer(update, context, "–û—Ç–¥—ã—Ö", rest_time)

        if query.data == "prev_exercise" and workout['current_exercise'] > 0:
            workout['current_exercise'] -= 1
            self.db.save_active_workout(user_id, workout)
            # Delete previous exercise message
            try:
                await query.message.delete()
            except Exception:
                pass
            await self._show_gym_exercise(update, context)

        elif query.data == "next_exercise" and workout['current_exercise'] < workout['total_exercises'] - 1:
            workout['current_exercise'] += 1
            self.db.save_active_workout(user_id, workout)
            # Delete previous exercise message
            try:
                await query.message.delete()
            except Exception:
                pass
            await self._show_gym_exercise(update, context)

        elif query.data == "finish_workout":
            await self._finish_workout(update, context)

    async def handle_exercise_timer(self, update: Update, context: ContextTypes.DEFAULT_TYPE, exercise_time: int):
        """Handle exercise duration timer"""
        query = update.callback_query
        logger.info(f"Starting exercise timer for {exercise_time} seconds")

        # Send initial timer message
        timer_message = await query.message.reply_text(
            "üèÉ‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!\n"
            f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {exercise_time} —Å–µ–∫"
        )
        logger.info("Timer message sent")

        for remaining in range(exercise_time - 1, -1, -1):
            await asyncio.sleep(1)
            try:
                if remaining > 0:
                    await timer_message.edit_text(
                        "üèÉ‚Äç‚ôÇÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!\n"
                        f"‚è± –û—Å—Ç–∞–ª–æ—Å—å: {remaining} —Å–µ–∫"
                    )
                    logger.debug(f"Timer updated: {remaining} seconds remaining")
                else:
                    await timer_message.edit_text("‚úÖ –í—Ä–µ–º—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ!")
                    logger.info("Exercise timer completed")
            except Exception as e:
                logger.error(f"Error updating timer at {remaining} seconds: {str(e)}", exc_info=True)
                break

        # Delete timer message after completion
        try:
            await timer_message.delete()
            logger.info("Timer message deleted")
        except Exception as e:
            logger.error(f"Error deleting timer message: {str(e)}", exc_info=True)

        completion_message = await query.message.reply_text(
            "–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            "–ù–∞–∂–º–∏—Ç–µ '‚úÖ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ' –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
        )
        logger.info("Completion message sent")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /start command"""
        try:
            await update.message.reply_text(messages.WELCOME_MESSAGE)
            logger.info(f"User {update.effective_user.id} started the bot")
        except Exception as e:
            logger.error(f"Error in start handler: {e}")
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def view_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """View existing profile"""
        try:
            user_id = update.effective_user.id
            logger.info(f"Viewing profile for user {user_id}")

            profile = self.db.get_user_profile(user_id)
            logger.info(f"Retrieved profile data: {profile}")

            if not profile:
                logger.info(f"No profile found for user {user_id}")
                await update.message.reply_text(
                    "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ."
                )
                return

            # Format profile data
            profile_text = "üèãÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            profile_text += f"üìä –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
            profile_text += f"üìè –†–æ—Å—Ç: {profile.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
            profile_text += f"‚öñÔ∏è –í–µ—Å: {profile.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
            profile_text += f"üë§ –ü–æ–ª: {profile.get('sex', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            profile_text += f"üéØ –¶–µ–ª–∏: {profile.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            profile_text += f"üí™ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {profile.get('fitness_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            profile_text += f"üèãÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {profile.get('equipment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

            # Add update option
            keyboard = [[InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="update_profile")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(profile_text, reply_markup=reply_markup)
            logger.info(f"Successfully displayed profile for user {user_id}")

        except Exception as e:
            logger.error(f"Error viewing profile: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def start_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start the profile creation/update process"""
        try:
            user_id = update.effective_user.id
            logger.info(f"Starting profile process for user {user_id}")

            profile = self.db.get_user_profile(user_id)
            logger.info(f"Existing profile check result: {profile is not None}")

            if profile:
                # If profile exists, show current profile and update options
                profile_text = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å:*\n\n"
                profile_text += f"üìä –í–æ–∑—Ä–∞—Å—Ç: {profile.get('age', '–ù–µ —É–∫–∞–∑–∞–Ω')} –ª–µ—Ç\n"
                profile_text += f"üìè –†–æ—Å—Ç: {profile.get('height', '–ù–µ —É–∫–∞–∑–∞–Ω')} —Å–º\n"
                profile_text += f"‚öñÔ∏è –í–µ—Å: {profile.get('weight', '–ù–µ —É–∫–∞–∑–∞–Ω')} –∫–≥\n"
                profile_text += f"üë§ –ü–æ–ª: {profile.get('sex', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                profile_text += f"üéØ –¶–µ–ª–∏: {profile.get('goals', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
                profile_text += f"üí™ –£—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏: {profile.get('fitness_level', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                profile_text += f"üèãÔ∏è –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {profile.get('equipment', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
                profile_text += "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?"

                keyboard = [
                    [InlineKeyboardButton("‚úèÔ∏è –û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ", callback_data="update_profile_full")],
                    [InlineKeyboardButton("üéØ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–µ–ª–∏", callback_data="update_goals")],
                    [InlineKeyboardButton("üí™ –ò–∑–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å", callback_data="update_level")],
                    [InlineKeyboardButton("‚ùå –û—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="keep_profile")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                await update.message.reply_text(
                    profile_text,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                logger.info(f"Displayed existing profile with update options for user {user_id}")
                return ConversationHandler.END

            # Clear any existing user data and start new profile creation
            context.user_data.clear()
            logger.info("Starting new profile creation flow")

            welcome_text = (
                "üëã –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –≤–∞—à —Ñ–∏—Ç–Ω–µ—Å-–ø—Ä–æ—Ñ–∏–ª—å!\n\n"
                "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å.\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):"
            )
            await update.message.reply_text(welcome_text)
            logger.info(f"Started new profile creation for user {user_id}")
            return AGE

        except Exception as e:
            logger.error(f"Error in start_profile: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    async def age(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle age input"""
        try:
            age = int(update.message.text)
            if 12 <= age <= 100:
                context.user_data['age'] = age
                await update.message.reply_text(
                    "üìè –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 175):"
                )
                return HEIGHT
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 12 –¥–æ 100 –ª–µ—Ç)"
                )
                return AGE
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —á–∏—Å–ª–æ–º"
            )
            return AGE

    async def height(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle height input"""
        try:
            height = int(update.message.text)
            if 100 <= height <= 250:
                context.user_data['height'] = height
                await update.message.reply_text(
                    "‚öñÔ∏è –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 70):"
                )
                return WEIGHT
            else:
                await update.message.reply_text(
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º)"
                )
                return HEIGHT
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç —á–∏—Å–ª–æ–º"
            )
            return HEIGHT

    async def weight(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle weight input"""
        try:
            weight = float(update.message.text)
            if 30 <= weight <= 200:
                context.user_data['weight'] = weight
                await update.message.reply_text(
                    messages.PROFILE_PROMPTS['sex'],
                    reply_markup=get_sex_keyboard()
                )
                return SEX
            else:
                await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 200 –∫–≥)")
                return WEIGHT
        except ValueError:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–µ—Å —á–∏—Å–ª–æ–º")
            return WEIGHT

    async def sex(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle sex selection"""
        query = update.callback_query
        sex = query.data
        if sex in ['–ú—É–∂—Å–∫–æ–π', '–ñ–µ–Ω—Å–∫–∏–π']:
            context.user_data['sex'] = sex
            await update.callback_query.message.reply_text(
                messages.PROFILE_PROMPTS['goals'],
                reply_markup=get_goals_keyboard()
            )
            return GOALS
        else:
            await update.callback_query.message.reply_text(messages.INVALID_INPUT)
            return SEX

    async def goals(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle fitness goals selection"""
        query = update.callback_query
        goals = query.data
        context.user_data['goals'] = goals
        await update.callback_query.message.reply_text(
            messages.PROFILE_PROMPTS['fitness_level'],
            reply_markup=get_fitness_level_keyboard()
        )
        return FITNESS_LEVEL

    async def fitness_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle fitness level selection"""
        query = update.callback_query
        level = query.data
        context.user_data['fitness_level'] = level
        await update.callback_query.message.reply_text(
            messages.PROFILE_PROMPTS['equipment'],
            reply_markup=get_equipment_keyboard()
        )
        return EQUIPMENT

    async def equipment(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle equipment selection and complete profile"""
        try:
            query = update.callback_query
            equipment = query.data
            context.user_data['equipment'] = equipment

            # Save profile to database
            self.db.save_user_profile(
                update.effective_user.id,
                context.user_data,
                update.effective_user.username
            )

            completion_message = (
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                "‚Ä¢ –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –∫–æ–º–∞–Ω–¥–æ–π /workout\n"
                "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–º–∞–Ω–¥–æ–π /progress\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥–æ–π /reminder"
            )
            await update.callback_query.message.reply_text(completion_message)
            logger.info(f"Profile completed for user {update.effective_user.id}")
            return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in equipment handler: {str(e)}", exc_info=True)
            await update.callback_query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    async def workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /workout command - show workout overview"""
        try:
            user_id = update.effective_user.id
            logger.info(f"Starting workout overview for user {user_id}")

            profile = self.db.get_user_profile(user_id)
            logger.info(f"Retrieved profile data: {profile}")

            if not profile:
                await update.message.reply_text(
                    "–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile"
                )
                return

            # Generate and cache the workout
            workout = self.workout_manager.generate_workout(profile)
            self.db.save_preview_workout(user_id, workout)

            # Show workout preview
            message = "üèãÔ∏è‚Äç‚ôÇÔ∏è *–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏*\n\n"
            message += f"‚Ä¢ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(workout['exercises'])}\n"
            message += f"‚Ä¢ –¢–∏–ø: {workout.get('workout_type', '—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π')}\n"
            message += f"‚Ä¢ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {workout.get('difficulty', '—Å—Ä–µ–¥–Ω—è—è')}\n\n"

            keyboard = [
                [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", callback_data="start_workout")],
                [InlineKeyboardButton("üîÑ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –¥—Ä—É–≥—É—é", callback_data="regenerate_workout")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )
            logger.info(f"Successfully displayed workout preview for user {user_id}")

        except Exception as e:
            logger.error(f"Error in workout command: {str(e)}", exc_info=True)
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def start_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Start a bodyweight workout session"""
        user_id = update.effective_user.id
        profile = self.db.get_user_profile(user_id)

        if not profile:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return

        equipment = profile.get('equipment', '').lower()
        if '–∑–∞–ª' in equipment:
            await update.message.reply_text(
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ. "
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_gym_workout –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∑–∞–ª–µ."
            )
            return

        # Get the previewed workout or generate new if none exists
        workout = self.db.get_preview_workout(user_id)
        if not workout:
            logger.info(f"No preview workout found for user {user_id}, generating new workout")
            workout = self.workout_manager.generate_bodyweight_workout(profile)
        else:
            logger.info(f"Using previewed workout for user {user_id}")

        self.db.start_active_workout(user_id, workout)
        self.db.clear_preview_workout(user_id)  # Clear the preview after starting
        await self._show_gym_exercise(update, context)


    async def handle_profile_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle profile-related callbacks"""
        query = update.callback_query
        try:
            await query.answer()
            user_id = query.from_user.id
            logger.info(f"Processing profile callback for user {user_id}: {query.data}")

            if not query.data:
                logger.error(f"Empty callback data received from user {user_id}")
                await query.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return ConversationHandler.END

            if query.data == "keep_profile":
                await query.message.reply_text(
                    "‚úÖ –•–æ—Ä–æ—à–æ, –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /workout –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
                )
                return ConversationHandler.END

            elif query.data == "update_profile_full":
                context.user_data.clear()
                await query.message.reply_text(
                    "üëã –î–∞–≤–∞–π—Ç–µ –æ–±–Ω–æ–≤–∏–º –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n\n"
                    "–î–ª—è –Ω–∞—á–∞–ª–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç (–ø–æ–ª–Ω—ã—Ö –ª–µ—Ç):"
                )
                return AGE

            elif query.data == "update_goals":
                # Preserve existing profile data
                existing_profile = self.db.get_user_profile(user_id)
                if not existing_profile:
                    await query.message.reply_text(
                        "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
                    )
                    return ConversationHandler.END

                context.user_data.update({
                    'age': existing_profile['age'],
                    'height': existing_profile['height'],
                    'weight': existing_profile['weight'],
                    'sex': existing_profile['sex'],
                    'fitness_level': existing_profile['fitness_level'],
                    'equipment': existing_profile['equipment']
                })

                await query.message.reply_text(
                    "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:",
                    reply_markup=get_goals_keyboard()
                )
                return GOALS

            elif query.data == "update_level":
                # Preserve existing profile data
                existing_profile = self.db.get_user_profile(user_id)
                if not existing_profile:
                    await query.message.reply_text(
                        "‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è."
                    )
                    return ConversationHandler.END

                context.user_data.update({
                    'age': existing_profile['age'],
                    'height': existing_profile['height'],
                    'weight': existing_profile['weight'],
                    'sex': existing_profile['sex'],
                    'goals': existing_profile['goals'],
                    'equipment': existing_profile['equipment']
                })

                await query.message.reply_text(
                    "üí™ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏:",
                    reply_markup=get_fitness_level_keyboard()
                )
                return FITNESS_LEVEL

            else:
                logger.warning(f"Unexpected callback data received: {query.data}")
                await query.message.reply_text(
                    "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
                return ConversationHandler.END

        except Exception as e:
            logger.error(f"Error in handle_profile_callback: {str(e)}", exc_info=True)
            await query.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return ConversationHandler.END

    async def handle_progress_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle progress dashboard callbacks"""
        query = update.callback_query
        await query.answer()
        user_id = query.from_user.id

        try:
            if query.data == "back_to_dashboard":
                logger.info(f"User {user_id} returning to main dashboard")
                await self.show_progress(update, context)
                return

            # Get stats once at the beginning
            logger.info(f"Retrieving statistics for user {user_id}")
            stats = self.db.get_detailed_progress_stats(user_id)
            logger.info(f"Retrieved stats: {stats}")
            message = ""

            if query.data == "progress_weekly":
                logger.info("Processing weekly progress view")
                weekly_stats = stats['weekly_stats']
                message = "*üìà –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –Ω–µ–¥–µ–ª—è–º*\n\n"
                for week, data in weekly_stats.items():
                    message += f"*{week}*\n"
                    message += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data['workouts']}\n"
                    message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {data['completed']}\n"
                    message += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['completion_rate']}%\n\n"
                logger.info("Weekly progress view processed")

            elif query.data == "progress_monthly":
                logger.info("Processing monthly progress view")
                monthly_stats = stats['monthly_stats']
                message = "*üìÖ –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç*\n\n"
                for month, data in monthly_stats.items():
                    message += f"*{month}*\n"
                    message += f"‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {data['workouts']}\n"
                    message += f"‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {data['completed']}\n"
                    message += f"‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {data['completion_rate']}%\n\n"
                logger.info("Monthly progress view processed")

            elif query.data == "achievements":
                logger.info("Processing achievements view")
                message = "*üèÜ –í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\n\n"

                # Achievement criteria
                achievements = []
                if stats.get('total_workouts', 0) > 0:
                    achievements.append("üéØ –ü–µ—Ä–≤–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞")
                if stats.get('total_workouts', 0) >= 10:
                    achievements.append("üí™ –ü–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ (10 —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫)")
                if stats.get('streaks', {}).get('longest_streak', 0) >= 7:
                    achievements.append("üî• –ù–µ–¥–µ–ª—å–Ω–∞—è —Å–µ—Ä–∏—è")
                if stats.get('completion_rate', 0) >= 80:
                    achievements.append("‚≠ê –í—ã—Å–æ–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å (>80%)")

                if achievements:
                    message += "\n".join(achievements)
                else:
                    message += "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è!"
                logger.info(f"Achievements processed: {achievements}")

            elif query.data == "workout_history":
                logger.info("Processing workout history view")
                workouts = self.db.get_user_progress(user_id)
                message = "*üìã –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫*\n\n"

                # Show last 5 workouts
                recent_workouts = workouts[-5:] if workouts else []
                logger.info(f"Found {len(recent_workouts)} recent workouts")

                for workout in recent_workouts:
                    date = workout['date']
                    completed = workout['exercises_completed']
                    total = workout['total_exercises']
                    message += f"üìÖ {date}\n"
                    message += f"‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}/{total} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π\n"
                    message += f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç: {int((completed/total)*100)}%\n\n"

            elif query.data == "intensity_analysis":
                logger.info("Processing intensity analysis view")
                intensity_stats = self.db.get_workout_intensity_stats(user_id)
                message = "*üí™ –ê–Ω–∞–ª–∏–∑ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏*\n\n"

                if intensity_stats:
                    # Show last 7 days
                    recent_stats = intensity_stats[-7:]
                    logger.info(f"Processing {len(recent_stats)} days of intensity data")

                    for stat in recent_stats:
                        date = stat['date']
                        completion = stat['completion_rate']
                        intensity_bar = "‚ñì" * (int(completion/10)) + "‚ñë" * (10 - int(completion/10))
                        message += f"üìÖ {date}\n"
                        message += f"{intensity_bar} {int(completion)}%\n\n"
                else:
                    message += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏."

            # Add back button for all views
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –¥–∞—à–±–æ—Ä–¥—É", callback_data="back_to_dashboard")]]
            reply_markup = InlineKeyboardMarkup(keyboard)

            logger.info("Sending updated progress view")
            await query.message.edit_text(
                message,
                reply_markup=reply_markup,
                parse_mode='Markdown'
            )

        except Exception as e:
            logger.error(f"Error handling progress callback: {str(e)}", exc_info=True)
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def handle_back_to_dashboard(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle back to dashboard button"""
        query = update.callback_query
        await query.answer()

        if query.data == "back_to_dashboard":
            await self.show_progress(update, context)

    async def show_calendar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /calendar command"""
        try:
            user_id = update.effective_user.id
            logger.info(f"Received /calendar command from user {user_id}")

            now = datetime.now()
            logger.info(f"Generating calendar for {now.year}-{now.month}")

            # Get workouts for current month
            start_date = now.replace(day=1).date()
            end_date = now.date()

            workouts = self.db.get_workouts_by_date(user_id, start_date, end_date)
            logger.info(f"Retrieved {len(workouts) if workouts else 0} workouts for calendar")

            # Generate calendar keyboard
            keyboard = get_calendar_keyboard(now.year, now.month, workouts)
            logger.info("Calendar keyboard generated successfully")

            # Send calendar message
            await update.message.reply_text(
                messages.CALENDAR_HELP,
                reply_markup=keyboard
            )
            logger.info("Calendar displayed successfully")
        except Exception as e:
            logger.error(f"Error showing calendar: {str(e)}", exc_info=True)
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_calendar_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle calendar navigation and date selection"""
        query = update.callback_query
        await query.answer()
        logger.info(f"Received calendar callback: {query.data}")

        try:
            # Extract data from callback
            data = query.data.split('_')
            logger.info(f"Calendar callback data: {data}")

            if data[0] == 'calendar':
                # Handle month navigation
                year = int(data[1])
                month = int(data[2])
                logger.info(f"Navigating to calendar {year}-{month}")

                # Get workouts for the selected month
                start_date = datetime(year, month, 1).date()
                end_date = (datetime(year, month + 1, 1) if month < 12 else datetime(year + 1, 1, 1)).date() - timedelta(days=1)

                workouts = self.db.get_workouts_by_date(query.from_user.id, start_date, end_date)
                logger.info(f"Retrieved {len(workouts) if workouts else 0} workouts for {year}-{month}")

                # Update calendar view
                calendar_keyboard = get_calendar_keyboard(year, month, workouts)
                await query.message.edit_reply_markup(reply_markup=calendar_keyboard)
                logger.info("Calendar view updated successfully")

            elif data[0] == 'date':
                # Handle date selection
                selected_date = datetime.strptime(data[1], '%Y-%m-%d').date()
                logger.info(f"Selected date: {selected_date}")

                workouts = self.db.get_workouts_by_date(query.from_user.id, selected_date, selected_date)
                logger.info(f"Found {len(workouts) if workouts else 0} workouts for selected date")

                if workouts:
                    # Show workouts for selected date
                    workout_details = f"üìÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ {selected_date.strftime('%d.%m.%Y')}:\n\n"
                    for workout in workouts:
                        status = "‚úÖ" if workout.get('workout_completed') else "‚≠ï"
                        completion = (workout['exercises_completed'] / workout['total_exercises'] * 100)
                        workout_details += (
                            f"{status} –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {workout['exercises_completed']}/{workout['total_exercises']}\n"
                            f"–ó–∞–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç—å: {completion:.1f}%\n\n"
                        )
                    await query.message.reply_text(workout_details)
                else:
                    await query.message.reply_text(f"–ù–∞ {selected_date.strftime('%d.%m.%Y')} —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        except Exception as e:
            logger.error(f"Error handling calendar callback: {str(e)}", exc_info=True)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    async def set_reminder(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /reminder command"""
        user_id = update.effective_user.id
        logger.info(f"Setting reminder for user {user_id}")

        # Check if user already has a reminder
        current_reminder = self.db.get_reminder(user_id)

        if current_reminder:
            message = f"‚è∞ –¢–µ–∫—É—â–µ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {current_reminder}\n"
            message += "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è?"
        else:
            message = "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:"

        # Get reminder keyboard from keyboards.py
        keyboard = get_reminder_keyboard()
        await update.message.reply_text(message, reply_markup=keyboard)

    async def handle_reminder_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle reminder time selection"""
        query = update.callback_query
        await query.answer()

        if query.data.startswith("reminder_"):
            time = query.data.split("_")[1]
            user_id = update.effective_user.id

            # Save reminder in database
            self.db.set_reminder(user_id, time)

            # Set up reminder in reminder manager
            self.reminder_manager.set_reminder(user_id, time)

            await query.message.edit_text(
                f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {time}\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —ç—Ç–æ –≤—Ä–µ–º—è."
            )
            logger.info(f"Reminder set to {time} for user {user_id}")

    async def muscle_group_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle muscle group specific workout commands"""
        user_id = update.effective_user.id
        profile = self.db.get_user_profile(user_id)

        if not profile:
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return

        equipment = profile.get('equipment', '').lower()
        if '–∑–∞–ª' not in equipment:
            await update.message.reply_text(
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª–∞."
            )
            return

        # Determine which muscle group workout was requested
        command = update.message.text[1:]  # Remove the '/' from command
        muscle_group_map = {
            'chest_biceps': '–≥—Ä—É–¥—å_–±–∏—Ü–µ–ø—Å',
            'back_triceps': '—Å–ø–∏–Ω–∞_—Ç—Ä–∏—Ü–µ–ø—Å',
            'legs': '–Ω–æ–≥–∏'
        }

        muscle_group = muscle_group_map.get(command)
        if not muscle_group:
            await update.message.reply_text(
                "–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/chest_biceps - –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≥—Ä—É–¥–∏ –∏ –±–∏—Ü–µ–ø—Å–∞\n"
                "/back_triceps - –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ —Å–ø–∏–Ω—ã –∏ —Ç—Ä–∏—Ü–µ–ø—Å–∞\n"
                "/legs - –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–æ–≥"
            )
            return

        # Generate and cache the workout
        workout = self.workout_manager.generate_muscle_group_workout(profile, muscle_group)
        self.db.save_preview_workout(user_id, workout)

        # Generate overview
        overview = self.workout_manager._generate_gym_overview(workout)

        # Add specific start command based on muscle group
        overview += "\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_gym_workout –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"

        await update.message.reply_text(overview)

    async def create_muscle_workout(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /create_muscle_workout command"""
        logger.info(f"User {update.effective_user.id} requested muscle workout creation")
        user_id = update.effective_user.id
        profile = self.db.get_user_profile(user_id)

        if not profile:
            logger.warning(f"No profile found for user {user_id}")
            await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return

        equipment = profile.get('equipment', '').lower()
        if '–∑–∞–ª' not in equipment:
            logger.warning(f"User {user_id} attempted muscle workout without gym equipment")
            await update.message.reply_text(
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –∑–∞–ª–µ. "
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω–æ–≥–æ –∑–∞–ª–∞."
            )
            return

        # Create keyboard with muscle group options
        keyboard = [
            [
                InlineKeyboardButton("–ì—Ä—É–¥—å + –ë–∏—Ü–µ–ø—Å", callback_data="muscle_–≥—Ä—É–¥—å_–±–∏—Ü–µ–ø—Å"),
                InlineKeyboardButton("–°–ø–∏–Ω–∞ + –¢—Ä–∏—Ü–µ–ø—Å", callback_data="muscle_—Å–ø–∏–Ω–∞_—Ç—Ä–∏—Ü–µ–ø—Å")
            ],
            [InlineKeyboardButton("–ù–æ–≥–∏", callback_data="muscle_–Ω–æ–≥–∏")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        logger.info(f"Showing muscle group selection buttons to user {user_id}")
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü –¥–ª—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:",
            reply_markup=reply_markup
        )

    async def handle_muscle_group_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle muscle group selection callback"""
        query = update.callback_query
        await query.answer()

        user_id = update.effective_user.id
        logger.info(f"User {user_id} selected muscle group: {query.data}")

        profile = self.db.get_user_profile(user_id)
        if not profile:
            logger.warning(f"No profile found for user {user_id} during muscle group selection")
            await query.message.reply_text("–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –∫–æ–º–∞–Ω–¥–æ–π /profile")
            return

        # Extract muscle group from callback data
        muscle_group = query.data.split('_', 1)[1]  # Remove 'muscle_' prefix
        logger.info(f"Generating workout for muscle group: {muscle_group}")

        try:
            # Generate and cache the workout
            workout = self.workout_manager.generate_muscle_group_workout(profile, muscle_group)
            if not workout:
                logger.error(f"Failed to generate workout for muscle group: {muscle_group}")
                await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return

            self.db.save_preview_workout(user_id, workout)
            logger.info(f"Successfully generated and saved preview workout for user {user_id}")

            # Generate overview
            overview = self.workout_manager._generate_gym_overview(workout)
            overview += "\nüì± –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start_gym_workout –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"

            # Delete the selection message and send the workout overview
            await query.message.delete()
            await query.message.reply_text(overview)
            logger.info(f"Sent workout overview to user {user_id}")

        except Exception as e:
            logger.error(f"Error generating muscle group workout: {str(e)}", exc_info=True)
            await query.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel and end the conversation."""
        await update.message.reply_text(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."
        )
        return ConversationHandler.END

    def get_handlers(self):
        """Return list of handlers to be registered"""
        # Create profile handler
        profile_handler = ConversationHandler(
            entry_points=[
                CommandHandler('profile', self.start_profile),
                CallbackQueryHandler(self.handle_profile_callback, pattern='^(update_profile|keep_profile|update_profile_full|update_goals|update_level)$')
            ],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.age)],
                HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.height)],
                WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.weight)],
                SEX: [CallbackQueryHandler(self.sex)],
                GOALS: [CallbackQueryHandler(self.goals)],
                FITNESS_LEVEL: [CallbackQueryHandler(self.fitness_level)],
                EQUIPMENT: [CallbackQueryHandler(self.equipment)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            name="profile_conversation"  # Add name for better logging
        )

        return [
            CommandHandler('start', self.start),
            CommandHandler('help', self.help),
            CommandHandler('workout', self.workout),
            CommandHandler('start_workout', self.start_workout),
            CommandHandler('start_gym_workout', self.start_gym_workout),
            CommandHandler('view_profile', self.view_profile),
            CommandHandler('progress', self.show_progress),
            CommandHandler('reminder', self.set_reminder),
            CommandHandler('calendar', self.show_calendar),
            profile_handler,
            # Add workout feedback handler
            CallbackQueryHandler(
                self.handle_workout_feedback,
                pattern='^feedback_(fun|not_fun|too_easy|ok|tired)$'
            ),
            # Add workout control handlers
            CallbackQueryHandler(
                self.handle_gym_workout_callback,
                pattern='^(exercise_timer_|circuit_rest_|exercise_rest_|rest_|exercise_done|set_done|prev_exercise|next_exercise|finish_workout)$'
            ),
            # Add reminder handlers
            CallbackQueryHandler(
                self.handle_reminder_callback,
                pattern='^reminder_'
            ),
            # Add calendar navigation handlers
            CallbackQueryHandler(
                self.handle_calendar_callback,
                pattern='^(calendar_|date_)$'
            ),
            CommandHandler('create_muscle_workout', self.create_muscle_workout),
            CallbackQueryHandler(
                self.handle_muscle_group_selection,
                pattern='^muscle_'
            ),
            CallbackQueryHandler(self.handle_progress_callback, pattern='^(progress_weekly|progress_monthly|achievements|workout_history|intensity_analysis|back_to_dashboard)$')
        ]

    def register_handlers(self, application: Application):
        """Register all handlers"""
        # Profile conversation handler
        profile_handler = ConversationHandler(
            entry_points=[
                CommandHandler('profile', self.start_profile),
                CallbackQueryHandler(
                    self.handle_profile_callback,
                    pattern='^(update_profile_full|update_goals|update_level|keep_profile)$'
                )
            ],
            states={
                AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.age)],
                HEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.height)],
                WEIGHT: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.weight)],
                SEX: [CallbackQueryHandler(self.sex)],
                GOALS: [CallbackQueryHandler(self.goals)],
                FITNESS_LEVEL: [CallbackQueryHandler(self.fitness_level)],
                EQUIPMENT: [CallbackQueryHandler(self.equipment)]
            },
            fallbacks=[CommandHandler('cancel', self.cancel)],
            name="profile_conversation",
            persistent=False
        )

        application.add_handler(profile_handler)
        logger.info("Profile conversation handler registered")

        # Update the general callback handler pattern to include new profile actions
        application.add_handler(
            CallbackQueryHandler(
                self.handle_profile_callback,
                pattern='^(update_profile_full|update_goals|update_level|keep_profile)$'
            )
        )
        # Calendar handlers first to ensure proper handling
        application.add_handler(CommandHandler("calendar", self.show_calendar))
        application.add_handler(CallbackQueryHandler(
            self.handle_calendar_callback,
            pattern=r"^(calendar_\d{4}_\d{1,2}|date_\d{4}-\d{2}-\d{2})$"
        ))

        # Other command handlers
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help))
        application.add_handler(CommandHandler("progress", self.show_progress))
        application.add_handler(CommandHandler("reminder", self.set_reminder))
        application.add_handler(CommandHandler("workout", self.workout))
        application.add_handler(CommandHandler("start_workout", self.start_workout))
        application.add_handler(CommandHandler("start_gym_workout", self.start_gym_workout))
        application.add_handler(CommandHandler("view_profile", self.view_profile))
        application.add_handler(CommandHandler('create_muscle_workout', self.create_muscle_workout))

        # Other callback handlers
        application.add_handler(CallbackQueryHandler(self.handle_workout_feedback, pattern=r"^feedback_"))
        application.add_handler(CallbackQueryHandler(self.handle_profile_callback, pattern=r"^(update_profile|keep_profile|update_profile_full|update_goals|update_level)$"))
        application.add_handler(CallbackQueryHandler(
            self.handle_gym_workout_callback,
            pattern=r"^(exercise_timer_|circuit_rest_|exercise_rest_|rest_|exercise_done|set_done|prev_exercise|next_exercise|finish_workout)$"
        ))
        application.add_handler(CallbackQueryHandler(self.handle_reminder_callback, pattern=r"^reminder_"))
        application.add_handler(CallbackQueryHandler(self.handle_progress_callback, pattern=r"^(progress_weekly|progress_monthly|achievements|workout_history|intensity_analysis|back_to_dashboard)$"))
        application.add_handler(CallbackQueryHandler(self.handle_muscle_group_selection, pattern=r"^muscle_"))

    async def cancel_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Cancel profile creation"""
        await update.message.reply_text(
            "–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ."
        )
        return ConversationHandler.END

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle the /help command"""
        await update.message.reply_text(messages.HELP_MESSAGE)

    async def handle_workout_feedback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Handle workout feedback"""
        query = update.callback_query
        await query.answer()

        feedback_type = query.data.split('_')[1]

        # Initialize response variables
        emotional_response = None
        physical_response = None

        # Map feedback to responses
        if feedback_type == 'fun':
            emotional_response = 'fun'
        elif feedback_type == 'not_fun':
            emotional_response = 'not_fun'
        elif feedback_type == 'too_easy':
            physical_response = 'too_easy'
        elif feedback_type == 'ok':
            physical_response = 'ok'
        elif feedback_type == 'tired':
            physical_response = 'tired'

        # Get workout ID from context
        workout_id = context.user_data.get('last_workout_id')
        if not workout_id:
            await query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç–∑—ã–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return

        # Save feedback
        feedback_data = {
            'workout_id': workout_id,
            'emotional_state': emotional_response,
            'physical_state': physical_response,
            'timestamp': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        }

        self.db.save_workout_feedback(
            update.effective_user.id,
            workout_id,
            feedback_data
        )

        await query.message.reply_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."
        )